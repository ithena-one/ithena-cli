name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v0.1.0, etc.

permissions:
  contents: write # Needed to create releases
  # id-token: write # Uncomment if using OIDC for provenance

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for changelog generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify your Go version, or use 'stable'

      # Add steps to build the frontend before running GoReleaser
      - name: Set up Node.js (for pnpm)
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js LTS version

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10 # Or your preferred pnpm version

      - name: Install Frontend Dependencies
        working-directory: ./webui/frontend # Adjust if your frontend path is different
        run: pnpm install --no-frozen-lockfile # Use --frozen-lockfile for CI

      - name: Build Frontend
        working-directory: ./webui/frontend # Adjust if your frontend path is different
        run: pnpm build

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # The version of GoReleaser to use.
          # It is recommended to use the latest version.
          # See https://github.com/goreleaser/goreleaser-action/releases
          version: latest
          args: release --clean # Use --clean to ensure a clean build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY_OFFICIAL }} # Pass the secret to GoReleaser
          # If you need to sign artifacts, you might need a GPG_FINGERPRINT
          # GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
